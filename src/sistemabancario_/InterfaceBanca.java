
package sistemabancario_;

import java.awt.BorderLayout;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.*; // Para todos los componentes de Swing como JFrame, JPanel, JLabel, etc.
import java.awt.*;    // Para layouts y diseño de la GUI.
import java.awt.event.ActionEvent;    // Para manejar los eventos de botones.
import java.awt.event.ActionListener; // Listener para eventos en Swing.
import javax.swing.table.DefaultTableModel;




/**
 *
 * @author Jossue
 */
public class InterfaceBanca extends javax.swing.JFrame {
public InterfaceBanca(String usuario) {
    initComponents(); // Inicializar los componentes de la GUI
    setLocationRelativeTo(null); // Centrar la ventana en la pantalla

    // Cargar información del usuario
    cargarInformacionUsuario(usuario);
}

 
       
    private int xMouse;
    private int yMouse;
    
      
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        barraSup = new javax.swing.JPanel();
        x = new javax.swing.JLabel();
        pinaSurSup = new javax.swing.JPanel();
        pinaSurLbl = new javax.swing.JLabel();
        infoCuenta = new javax.swing.JPanel();
        saldoLabel = new javax.swing.JLabel();
        dolarLabel = new javax.swing.JLabel();
        valorSaldo = new javax.swing.JLabel();
        panelCrearCuenta = new javax.swing.JPanel();
        Buscar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cuentasCliente = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMovimientos = new javax.swing.JTable();
        movLabel = new javax.swing.JLabel();
        realMovLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        numCuenLabel = new javax.swing.JLabel();
        tipCuenLabel = new javax.swing.JLabel();
        montLabel = new javax.swing.JLabel();
        desLabel = new javax.swing.JLabel();
        transferir = new javax.swing.JButton();
        numeroCuenta = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        montoTransferencia = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripcion = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        tuCuentaLbl = new javax.swing.JLabel();
        crearCuentalbl = new javax.swing.JLabel();
        separadorCueMov = new javax.swing.JSeparator();
        sepTuMov = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);

        fondo.setBackground(new java.awt.Color(238, 238, 238));
        fondo.setForeground(new java.awt.Color(255, 255, 255));
        fondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        barraSup.setBackground(new java.awt.Color(255, 255, 255));
        barraSup.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                barraSupMouseDragged(evt);
            }
        });
        barraSup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barraSupMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                barraSupMousePressed(evt);
            }
        });

        x.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        x.setText("    X");
        x.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                xMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout barraSupLayout = new javax.swing.GroupLayout(barraSup);
        barraSup.setLayout(barraSupLayout);
        barraSupLayout.setHorizontalGroup(
            barraSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraSupLayout.createSequentialGroup()
                .addContainerGap(747, Short.MAX_VALUE)
                .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        barraSupLayout.setVerticalGroup(
            barraSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barraSupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(x, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
        );

        fondo.add(barraSup, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, 790, -1));

        pinaSurSup.setBackground(new java.awt.Color(160, 0, 26));

        pinaSurLbl.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 24)); // NOI18N
        pinaSurLbl.setForeground(new java.awt.Color(255, 255, 255));
        pinaSurLbl.setText("BANCO PIÑASUR");

        javax.swing.GroupLayout pinaSurSupLayout = new javax.swing.GroupLayout(pinaSurSup);
        pinaSurSup.setLayout(pinaSurSupLayout);
        pinaSurSupLayout.setHorizontalGroup(
            pinaSurSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pinaSurSupLayout.createSequentialGroup()
                .addContainerGap(302, Short.MAX_VALUE)
                .addComponent(pinaSurLbl)
                .addGap(315, 315, 315))
        );
        pinaSurSupLayout.setVerticalGroup(
            pinaSurSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pinaSurSupLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pinaSurLbl)
                .addContainerGap())
        );

        fondo.add(pinaSurSup, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 790, 50));

        infoCuenta.setBackground(new java.awt.Color(255, 255, 255));

        saldoLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        saldoLabel.setText("Saldo de la Cuenta");

        dolarLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 24)); // NOI18N
        dolarLabel.setText("$");

        valorSaldo.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 24)); // NOI18N
        valorSaldo.setText("0,00");
        valorSaldo.setToolTipText("Saldo Cuenta");

        javax.swing.GroupLayout infoCuentaLayout = new javax.swing.GroupLayout(infoCuenta);
        infoCuenta.setLayout(infoCuentaLayout);
        infoCuentaLayout.setHorizontalGroup(
            infoCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoCuentaLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(infoCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saldoLabel)
                    .addGroup(infoCuentaLayout.createSequentialGroup()
                        .addComponent(dolarLabel)
                        .addGap(30, 30, 30)
                        .addComponent(valorSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        infoCuentaLayout.setVerticalGroup(
            infoCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoCuentaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saldoLabel)
                .addGap(18, 18, 18)
                .addGroup(infoCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dolarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valorSaldo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fondo.add(infoCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 360, 90));

        panelCrearCuenta.setBackground(new java.awt.Color(255, 255, 255));
        panelCrearCuenta.setToolTipText("");

        Buscar.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 12)); // NOI18N
        Buscar.setText("BUSCAR");
        Buscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        jLabel6.setText("Sus Cuentas");

        cuentasCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cuenta 1", "Cuenta 2" }));
        cuentasCliente.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cuentasCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuentasClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCrearCuentaLayout = new javax.swing.GroupLayout(panelCrearCuenta);
        panelCrearCuenta.setLayout(panelCrearCuentaLayout);
        panelCrearCuentaLayout.setHorizontalGroup(
            panelCrearCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCrearCuentaLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(panelCrearCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelCrearCuentaLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cuentasCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        panelCrearCuentaLayout.setVerticalGroup(
            panelCrearCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCrearCuentaLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panelCrearCuentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cuentasCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Buscar)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        fondo.add(panelCrearCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, 460, 250));

        tablaMovimientos.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        tablaMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Propietario", "Número Cuenta", "Monto", "Movimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaMovimientos);
        if (tablaMovimientos.getColumnModel().getColumnCount() > 0) {
            tablaMovimientos.getColumnModel().getColumn(0).setResizable(false);
            tablaMovimientos.getColumnModel().getColumn(1).setResizable(false);
            tablaMovimientos.getColumnModel().getColumn(2).setResizable(false);
            tablaMovimientos.getColumnModel().getColumn(3).setResizable(false);
            tablaMovimientos.getColumnModel().getColumn(4).setResizable(false);
        }

        fondo.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 400, 530, 260));

        movLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 18)); // NOI18N
        movLabel.setText("Movimientos");
        fondo.add(movLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 370, -1, -1));

        realMovLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 18)); // NOI18N
        realMovLabel.setText("Realizar Movimientos");
        fondo.add(realMovLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        numCuenLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        numCuenLabel.setText("Número Cuenta");

        tipCuenLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        tipCuenLabel.setText("Tipo Cuenta");

        montLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        montLabel.setText("Monto");

        desLabel.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        desLabel.setText("Descripción");

        transferir.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 12)); // NOI18N
        transferir.setText("TRANSFERIR");
        transferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferirActionPerformed(evt);
            }
        });

        numeroCuenta.setToolTipText("Ingrese el número cuenta");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ahorros", "Corriente" }));
        jComboBox1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        montoTransferencia.setToolTipText("Ingrese el monto");

        descripcion.setColumns(20);
        descripcion.setRows(5);
        descripcion.setToolTipText("Ingrese alguna descripción");
        jScrollPane2.setViewportView(descripcion);

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 12)); // NOI18N
        jLabel4.setText("Beneficiario");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(transferir))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(desLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(montLabel)
                                .addGap(90, 90, 90)
                                .addComponent(montoTransferencia))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(numCuenLabel)
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numeroCuenta)
                                    .addComponent(jComboBox1, 0, 212, Short.MAX_VALUE))))
                        .addGap(16, 16, 16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tipCuenLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numCuenLabel)
                    .addComponent(numeroCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipCuenLabel)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(montLabel)
                    .addComponent(montoTransferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(desLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(transferir)
                .addContainerGap())
        );

        fondo.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 360, 370));

        tuCuentaLbl.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        tuCuentaLbl.setText("Tu Cuenta");
        fondo.add(tuCuentaLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        crearCuentalbl.setFont(new java.awt.Font("Microsoft JhengHei Light", 0, 12)); // NOI18N
        crearCuentalbl.setText("Información de la Cuenta");
        fondo.add(crearCuentalbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, -1, -1));

        separadorCueMov.setForeground(new java.awt.Color(204, 0, 0));
        fondo.add(separadorCueMov, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 370, 460, 10));

        sepTuMov.setForeground(new java.awt.Color(204, 0, 0));
        fondo.add(sepTuMov, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 233, 360, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void barraSupMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraSupMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse,y - yMouse);
    }//GEN-LAST:event_barraSupMouseDragged

    private void barraSupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraSupMouseClicked
        
    }//GEN-LAST:event_barraSupMouseClicked

    private void barraSupMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraSupMousePressed
         xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_barraSupMousePressed

    private void cuentasClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuentasClienteActionPerformed
        cuentasCliente.addActionListener(e -> {
        String numeroCuentaSeleccionada = (String) cuentasCliente.getSelectedItem();
        if (numeroCuentaSeleccionada != null) {
            double saldo = obtenerSaldoPorCuenta(numeroCuentaSeleccionada);
            valorSaldo.setText(String.format("%.2f", saldo)); // Mostrar saldo en el JLabel
        }
    });
    }//GEN-LAST:event_cuentasClienteActionPerformed
public void cargarMovimientos(String numeroCuenta, JTable tabla) {
    String sql = "SELECT t.fecha, " +
                 "       CASE " +
                 "           WHEN t.id_cuenta_origen = c.id THEN 'TRANSFERENCIA SALIENTE' " +
                 "           WHEN t.id_cuenta_destino = c.id THEN 'TRANSFERENCIA ENTRANTE' " +
                 "       END AS tipo_movimiento, " +
                 "       CASE " +
                 "           WHEN t.id_cuenta_origen = c.id THEN u_destino.nombre " +
                 "           WHEN t.id_cuenta_destino = c.id THEN u_origen.nombre " +
                 "       END AS propietario, " +
                 "       CASE " +
                 "           WHEN t.id_cuenta_origen = c.id THEN t.id_cuenta_destino " +
                 "           WHEN t.id_cuenta_destino = c.id THEN t.id_cuenta_origen " +
                 "       END AS numero_cuenta_relacionada, " +
                 "       CASE " +
                 "           WHEN t.id_cuenta_origen = c.id THEN CONCAT('-', t.monto) " +
                 "           WHEN t.id_cuenta_destino = c.id THEN CONCAT('+', t.monto) " +
                 "       END AS monto " +
                 "FROM transacciones t " +
                 "INNER JOIN cuentas c ON c.numero_cuenta = ? " +
                 "LEFT JOIN usuarios u_origen ON t.id_cuenta_origen = u_origen.id " +
                 "LEFT JOIN usuarios u_destino ON t.id_cuenta_destino = u_destino.id " +
                 "WHERE t.id_cuenta_origen = c.id OR t.id_cuenta_destino = c.id " +
                 "ORDER BY t.fecha DESC";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        stmt.setString(1, numeroCuenta);

        ResultSet rs = stmt.executeQuery();

        // Modelo de tabla
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0); // Limpiar la tabla

        while (rs.next()) {
            Object[] fila = {
                rs.getTimestamp("fecha"),
                rs.getString("propietario"), // Nombre del propietario
                rs.getString("numero_cuenta_relacionada"),
                rs.getString("monto"),
                rs.getString("tipo_movimiento") // Tipo de movimiento (entrante o saliente)
            };
            model.addRow(fila);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar movimientos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}




    private void transferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferirActionPerformed
        // Obtener los valores ingresados en los campos de la interfaz
    String numeroCuentaOrigen = cuentasCliente.getSelectedItem().toString(); // Cuenta seleccionada en el combo box
    String numeroCuentaDestino = numeroCuenta.getText(); // Campo de texto para la cuenta destino
    String descripcionTexto = descripcion.getText().trim(); // Descripción de la transferencia

    // Validar que el monto sea un número válido y mayor a 0
    double monto;
    try {
        monto = Double.parseDouble(montoTransferencia.getText());
        if (monto <= 0) {
            throw new NumberFormatException("El monto debe ser mayor a 0.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese un monto válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar que los campos no estén vacíos
    if (numeroCuentaOrigen.isEmpty() || numeroCuentaDestino.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Debe ingresar todos los datos requeridos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Realizar la transferencia
    try {
        realizarTransferencia(numeroCuentaOrigen, numeroCuentaDestino, monto, descripcionTexto);
        // Actualizar la tabla de movimientos después de la transferencia
        cargarMovimientos(numeroCuentaOrigen, tablaMovimientos);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al realizar la transferencia: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_transferirActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        
    String numeroCuenta = cuentasCliente.getSelectedItem().toString();
    cargarMovimientos(numeroCuenta, tablaMovimientos);


    }//GEN-LAST:event_BuscarActionPerformed

    private void xMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xMouseClicked
        // Crear una nueva instancia de Loggin y hacerla visible
    Loggin loggin = new Loggin();
    loggin.setVisible(true);

    // Cerrar la ventana actual (InterfaceBanca)
    this.dispose();
    }//GEN-LAST:event_xMouseClicked

    private void cargarInformacionUsuario(String usuario) {
    try {
        // Obtener y mostrar el saldo del usuario
        double saldo = obtenerSaldo(usuario);
        valorSaldo.setText(String.format("%.2f", saldo));

        // Cargar las cuentas del usuario en el ComboBox
        cargarCuentasUsuario(usuario);

        // Cargar los movimientos del usuario en la tabla
        cargarMovimientos(usuario, tablaMovimientos);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar la información del usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void cargarCuentasUsuario(String usuario) {
    String sql = "SELECT c.numero_cuenta FROM cuentas c " +
                 "JOIN usuarios u ON c.id_usuario = u.id WHERE u.usuario = ?";
    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, usuario);
        ResultSet rs = stmt.executeQuery();

        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        while (rs.next()) {
            model.addElement(rs.getString("numero_cuenta")); // Agregar cada cuenta al modelo
        }

        cuentasCliente.setModel(model); // Asignar el modelo al ComboBox
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar las cuentas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
private double obtenerSaldoPorCuenta(String numeroCuenta) {
    String sql = "SELECT saldo FROM cuentas WHERE numero_cuenta = ?";
    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, numeroCuenta);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getDouble("saldo"); // Retorna el saldo de la cuenta
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener el saldo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    return 0.0; // Retorna 0.0 si hay algún error o no encuentra la cuenta
}

public double obtenerSaldo(String usuario) {
    String sql = "SELECT saldo FROM usuarios WHERE usuario = ?";
    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, usuario);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getDouble("saldo");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return 0.0; // Retorna 0 si no encuentra el saldo
}
public void realizarTransferencia(String numeroCuentaOrigen, String numeroCuentaDestino, double monto, String descripcion) {
    String sqlObtenerIdCuenta = "SELECT id FROM cuentas WHERE numero_cuenta = ?";
    String sqlDescuento = "UPDATE cuentas SET saldo = saldo - ? WHERE id = ?";
    String sqlIncremento = "UPDATE cuentas SET saldo = saldo + ? WHERE id = ?";
    String sqlTransaccion = "INSERT INTO transacciones (id_cuenta_origen, id_cuenta_destino, monto, tipo, fecha) VALUES (?, ?, ?, 'TRANSFERENCIA', CURRENT_TIMESTAMP)";

    try (Connection conn = DatabaseConnection.getConnection()) {
        conn.setAutoCommit(false); // Iniciar transacción

        // Obtener el ID de la cuenta origen
        int idCuentaOrigen;
        try (PreparedStatement stmt = conn.prepareStatement(sqlObtenerIdCuenta)) {
            stmt.setString(1, numeroCuentaOrigen);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                idCuentaOrigen = rs.getInt("id");
            } else {
                throw new SQLException("No se encontró la cuenta origen.");
            }
        }

        // Obtener el ID de la cuenta destino
        int idCuentaDestino;
        try (PreparedStatement stmt = conn.prepareStatement(sqlObtenerIdCuenta)) {
            stmt.setString(1, numeroCuentaDestino);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                idCuentaDestino = rs.getInt("id");
            } else {
                throw new SQLException("No se encontró la cuenta destino.");
            }
        }

        // Descontar el monto de la cuenta origen
        try (PreparedStatement stmtDescuento = conn.prepareStatement(sqlDescuento)) {
            stmtDescuento.setDouble(1, monto);
            stmtDescuento.setInt(2, idCuentaOrigen);
            stmtDescuento.executeUpdate();
        }

        // Incrementar el monto en la cuenta destino
        try (PreparedStatement stmtIncremento = conn.prepareStatement(sqlIncremento)) {
            stmtIncremento.setDouble(1, monto);
            stmtIncremento.setInt(2, idCuentaDestino);
            stmtIncremento.executeUpdate();
        }

        // Registrar la transacción en el historial
        try (PreparedStatement stmtTransaccion = conn.prepareStatement(sqlTransaccion)) {
            stmtTransaccion.setInt(1, idCuentaOrigen);
            stmtTransaccion.setInt(2, idCuentaDestino);
            stmtTransaccion.setDouble(3, monto);
            stmtTransaccion.executeUpdate();
        }
        String sqlVerificarSaldo = "SELECT saldo FROM cuentas WHERE id = ?";
try (PreparedStatement stmt = conn.prepareStatement(sqlVerificarSaldo)) {
    stmt.setInt(1, idCuentaOrigen);
    ResultSet rs = stmt.executeQuery();
    if (rs.next()) {
        double saldoDisponible = rs.getDouble("saldo");
        if (saldoDisponible < monto) {
            throw new SQLException("Saldo insuficiente en la cuenta origen.");
        }
    } else {
        throw new SQLException("No se pudo verificar el saldo de la cuenta origen.");
    }
}


        conn.commit(); // Confirmar la transacción
        JOptionPane.showMessageDialog(null, "Transferencia realizada con éxito.");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al realizar la transferencia: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
  
cargarMovimientos(numeroCuentaOrigen, tablaMovimientos); // Actualizar movimientos de la cuenta origen
cargarMovimientos(numeroCuentaDestino, tablaMovimientos); // Actualizar movimientos de la cuenta destino

}

public void actualizarComboBoxCuentasCliente(String numeroCuenta) {
    cuentasCliente.removeAllItems(); // Limpia el ComboBox
    cuentasCliente.addItem(numeroCuenta); // Agrega el número de cuenta generado
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceBanca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceBanca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceBanca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceBanca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Loggin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JPanel barraSup;
    private javax.swing.JLabel crearCuentalbl;
    private javax.swing.JComboBox<String> cuentasCliente;
    private javax.swing.JLabel desLabel;
    private javax.swing.JTextArea descripcion;
    private javax.swing.JLabel dolarLabel;
    private javax.swing.JPanel fondo;
    private javax.swing.JPanel infoCuenta;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel montLabel;
    private javax.swing.JTextField montoTransferencia;
    private javax.swing.JLabel movLabel;
    private javax.swing.JLabel numCuenLabel;
    private javax.swing.JTextField numeroCuenta;
    private javax.swing.JPanel panelCrearCuenta;
    private javax.swing.JLabel pinaSurLbl;
    private javax.swing.JPanel pinaSurSup;
    private javax.swing.JLabel realMovLabel;
    private javax.swing.JLabel saldoLabel;
    private javax.swing.JSeparator sepTuMov;
    private javax.swing.JSeparator separadorCueMov;
    private javax.swing.JTable tablaMovimientos;
    private javax.swing.JLabel tipCuenLabel;
    private javax.swing.JButton transferir;
    private javax.swing.JLabel tuCuentaLbl;
    private javax.swing.JLabel valorSaldo;
    private javax.swing.JLabel x;
    // End of variables declaration//GEN-END:variables
}
